-- LocalScript: EmoteGiverGUI.lua
-- Place this under StarterGui for persistent UI across respawns

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer

-- Prevent duplicate GUI creation on respawn
if player:FindFirstChild("PlayerGui") and player.PlayerGui:FindFirstChild("EmoteGiverGUI") then
    return
end

local emotesFolder = ReplicatedStorage:WaitForChild("Emotes")
local playerData = ReplicatedStorage:WaitForChild("PlayerData"):WaitForChild(player.Name)
local equipped = playerData:WaitForChild("Equipped")

-- Create ScreenGui and UIScale for mobile support
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "EmoteGiverGUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild("PlayerGui")

local uiScale = Instance.new("UIScale", screenGui)
uiScale.Scale = UserInputService.TouchEnabled and 0.75 or 1

-- Styling helper
local function style(frame)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0,8)
    corner.Parent = frame
    local stroke = Instance.new("UIStroke")
    stroke.Thickness = 2
    stroke.Transparency = 0.5
    stroke.Parent = frame
end

-- Main GUI Frame
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.AnchorPoint = Vector2.new(0.5,0.5)
mainFrame.Position = UDim2.new(0.5,0,0.5,0)
mainFrame.Size = UDim2.new(0.8,0,0.8,0)
mainFrame.BackgroundColor3 = Color3.fromRGB(20,20,20)
mainFrame.Visible = false
mainFrame.Parent = screenGui
style(mainFrame)

-- Make draggable on desktop only
if not UserInputService.TouchEnabled then
    local dragging, dragInput, dragStart, startPos
    mainFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then dragging = false end
            end)
        end
    end)
    mainFrame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then dragInput = input end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input == dragInput then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
                                          startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end

-- Header
local header = Instance.new("TextLabel")
header.Size = UDim2.new(1,0,0,50)
header.BackgroundTransparency = 1
header.Text = "Emote Giver"
header.Font = Enum.Font.GothamBold
header.TextColor3 = Color3.new(1,1,1)
header.TextScaled = true
header.Parent = mainFrame

-- Slot Selector (6)
local slotFrame = Instance.new("Frame")
slotFrame.Size = UDim2.new(1,-20,0,50)
slotFrame.Position = UDim2.new(0,10,0,60)
slotFrame.BackgroundTransparency = 1
slotFrame.Parent = mainFrame
style(slotFrame)

local slotButtons = {}
local selectedSlot = 1
for i = 1, 6 do
    local b = Instance.new("TextButton")
    b.Name = "Slot"..i
    b.Size = UDim2.new(0, (mainFrame.AbsoluteSize.X-20)/6, 1, 0)
    b.Position = UDim2.new((i-1)/6, 10 + ((i-1)*2), 0, 0)
    b.Text = "Slot"..i
    b.Font = Enum.Font.Gotham
    b.TextColor3 = Color3.new(1,1,1)
    b.BackgroundColor3 = (i == selectedSlot) and Color3.fromRGB(80,80,80) or Color3.fromRGB(50,50,50)
    b.Parent = slotFrame
    style(b)
    b.TextScaled = true
    slotButtons[i] = b
    b.MouseButton1Click:Connect(function()
        selectedSlot = i
        for idx, btn in ipairs(slotButtons) do
            btn.BackgroundColor3 = (idx == selectedSlot) and Color3.fromRGB(80,80,80) or Color3.fromRGB(50,50,50)
        end
    end)
end

-- Search Box
local searchBox = Instance.new("TextBox")
searchBox.Size = UDim2.new(1,-20,0,40)
searchBox.Position = UDim2.new(0,10,0,130)
searchBox.PlaceholderText = "Search Emote"
searchBox.ClearTextOnFocus = false
searchBox.Font = Enum.Font.Gotham
searchBox.TextColor3 = Color3.new(1,1,1)
searchBox.BackgroundColor3 = Color3.fromRGB(40,40,40)
searchBox.Parent = mainFrame
style(searchBox)
searchBox.TextScaled = true

-- Emote List
local scroll = Instance.new("ScrollingFrame")
scroll.Size = UDim2.new(1,-20,1,-240)
scroll.Position = UDim2.new(0,10,0,180)
scroll.CanvasSize = UDim2.new(0,0,0,0)
scroll.BackgroundTransparency = 0.3
scroll.BackgroundColor3 = Color3.fromRGB(40,40,40)
scroll.ScrollBarThickness = 8
scroll.Parent = mainFrame
style(scroll)

local uiList = Instance.new("UIListLayout")
uiList.Parent = scroll
uiList.SortOrder = Enum.SortOrder.Name
uiList.Padding = UDim.new(0,8)

local emoteButtons = {}
for _, em in ipairs(emotesFolder:GetChildren()) do
    if em:IsA("Animation") then
        local btn = Instance.new("TextButton")
        btn.Name = em.Name
        btn.Size = UDim2.new(1,0,0,50)
        btn.Text = em.Name
        btn.BackgroundColor3 = Color3.fromRGB(60,60,60)
        btn.Font = Enum.Font.Gotham
        btn.TextColor3 = Color3.new(1,1,1)
        btn.Parent = scroll
        style(btn)
        btn.TextScaled = true
        table.insert(emoteButtons, btn)
        btn.MouseButton1Click:Connect(function()
            for _, c in ipairs(emoteButtons) do c.BackgroundColor3 = Color3.fromRGB(60,60,60) end
            btn.BackgroundColor3 = Color3.fromRGB(100,100,100)
            selectedEmote = em.Name
        end)
    end
end
scroll.CanvasSize = UDim2.new(0,0,0,uiList.AbsoluteContentSize.Y + 20)

-- Filter
local function filterEmotes(query)
    local y = 0
    local lower = string.lower
    for _, btn in ipairs(emoteButtons) do
        local visible = lower(btn.Name):find(lower(query)) ~= nil
        btn.Visible = visible
        if visible then y = y + btn.Size.Y.Offset + uiList.Padding.Offset end
    end
    scroll.CanvasSize = UDim2.new(0,0,0,y + 20)
end
searchBox:GetPropertyChangedSignal("Text"):Connect(function()
    filterEmotes(searchBox.Text)
end)

-- Give Button
local giveBtn = Instance.new("TextButton")
giveBtn.Size = UDim2.new(1,-20,0,50)
giveBtn.Position = UDim2.new(0,10,1,-60)
giveBtn.Text = "Give Emote"
giveBtn.Font = Enum.Font.GothamBold
giveBtn.TextColor3 = Color3.new(1,1,1)
giveBtn.BackgroundColor3 = Color3.fromRGB(0,150,0)
giveBtn.Parent = mainFrame
style(giveBtn)
giveBtn.TextScaled = true

giveBtn.MouseButton1Click:Connect(function()
    if not selectedEmote then warn("Select an emote first") return end
    local key = (selectedSlot == 1) and "Emote" or ("Emote"..selectedSlot)
    local val = equipped:FindFirstChild(key)
    if val then val.Value = selectedEmote end
end)

-- Toggle Button
local toggleBtn = Instance.new("TextButton")
toggleBtn.AnchorPoint = Vector2.new(0.5,0)
toggleBtn.Position = UDim2.new(0.5,0,0.05,0)
toggleBtn.Size = UDim2.new(0.5,0,0,50)
toggleBtn.Text = "Open Emote Giver"
toggleBtn.Font = Enum.Font.GothamBold
toggleBtn.TextColor3 = Color3.new(1,1,1)
toggleBtn.BackgroundColor3 = Color3.fromRGB(30,30,30)
toggleBtn.Parent = screenGui
style(toggleBtn)
toggleBtn.TextScaled = true
toggleBtn.Visible = false
toggleBtn.MouseButton1Click:Connect(function()
    mainFrame.Visible = not mainFrame.Visible
    toggleBtn.Text = mainFrame.Visible and "Close Emote Giver" or "Open Emote Giver"
end)

-- Loader
local loaderFrame = Instance.new("Frame")
loaderFrame.Size = UDim2.new(1,0,1,0)
loaderFrame.Parent = screenGui
loaderFrame.BackgroundTransparency = 1

local loadText = Instance.new("TextLabel")
loadText.Size = UDim2.new(0.6,0,0,40)
loadText.Position = UDim2.new(0.5,-(screenGui.AbsoluteSize.X*0.3),0.5,-20)
loadText.BackgroundTransparency = 1
loadText.Font = Enum.Font.Code
loadText.TextColor3 = Color3.new(1,1,1)
loadText.TextScaled = true
loadText.Parent = loaderFrame

local words = {"Emote Giver","Initializing","Preparing List","Almost Ready"}
spawn(function()
    for _, word in ipairs(words) do
        for i = 1, #word do
            loadText.Text = string.sub(word,1,i)
            task.wait(0.05)
        end
        task.wait(0.5)
        for i = #word, 1, -1 do
            loadText.Text = string.sub(word,1,i-1)
            task.wait(0.03)
        end
    end
    task.wait(0.3)
    loaderFrame:Destroy()
    toggleBtn.Visible = true
end)
